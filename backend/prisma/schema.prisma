generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  total_xp         Int              @default(0)
  current_streak   Int              @default(0)
  best_streak      Int              @default(0)
  last_active_date DateTime?
  submissions      Submission[]
  progresses       LessonProgress[]

  @@map("users")
}

model Lesson {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  order          Int              @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  problems       Problem[]
  progresses     LessonProgress[]

  @@map("lessons")
}

enum ProblemType {
  MULTIPLE_CHOICE
  INPUT
}

model Problem {
  id             Int             @id @default(autoincrement())
  lesson_id      Int
  lesson         Lesson          @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  type           ProblemType
  question       String
  correct_answer Int?         
  xp             Int             @default(10) 
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  options        ProblemOption[]
  submissions    Submission[]

  @@map("problems")
}

model ProblemOption {
  id          Int      @id @default(autoincrement())
  problem_id  Int
  problem     Problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  value       Int
  is_correct  Boolean  @default(false)
  created_at  DateTime @default(now())

  @@map("problem_options")
}

model Submission {
  id           Int      @id @default(autoincrement())
  attempt_id   String    
  user_id      Int
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson_id    Int
  problem_id   Int
  problem      Problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  answer       Int   
  is_correct   Boolean
  xp_awarded   Int      @default(0)
  created_at   DateTime @default(now())

  @@index([user_id, lesson_id])
  @@index([attempt_id])
  @@map("submissions")
}

model LessonProgress {
  id               Int      @id @default(autoincrement())
  user_id          Int
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson_id        Int
  lesson           Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  is_completed     Boolean  @default(false)
  completed_at     DateTime?
  total_problems   Int      @default(0)
  correct_answers  Int      @default(0)
  progress_percent Float    @default(0)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@unique([user_id, lesson_id])
  @@map("user_progress")
}